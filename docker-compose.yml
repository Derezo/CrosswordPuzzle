version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      target: ${BUILD_TARGET:-production}
    container_name: crossword-backend
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=5000
      - DATABASE_URL=file:./prisma/dev.db
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=${JWT_EXPIRE:-7d}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - PUZZLE_SECRET=${PUZZLE_SECRET}
      - AUTO_SOLVE_COOLDOWN_HOURS=${AUTO_SOLVE_COOLDOWN_HOURS:-12}
    volumes:
      - backend_data:/app/prisma
      - backend_logs:/app/logs
      # Development bind mount (only for dev target) 
      - ./backend:/app:delegated
    networks:
      - crossword-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/puzzle/today', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      target: ${BUILD_TARGET:-production}
    container_name: crossword-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5000/api}
    volumes:
      - frontend_cache:/app/.next/cache
      # Development bind mount (only for dev target)
      - ./frontend:/app:delegated
      - /app/node_modules
    networks:
      - crossword-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional, for production scaling)
  redis:
    image: redis:7-alpine
    container_name: crossword-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - crossword-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass dev-redis-password

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: crossword-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - crossword-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

  # Database backup service
  db-backup:
    image: alpine:latest
    container_name: crossword-backup
    volumes:
      - backend_data:/data:ro
      - ./backups:/backups
    command: |
      sh -c '
        apk add --no-cache dcron rsync
        echo "0 2 * * * rsync -av /data/ /backups/daily/\$$(date +%Y%m%d)/" | crontab -
        echo "0 2 * * 0 find /backups/daily -name \"*\" -mtime +30 -delete" | crontab -
        crond -f
      '
    restart: unless-stopped
    profiles:
      - production

volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  frontend_cache:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  crossword-network:
    driver: bridge