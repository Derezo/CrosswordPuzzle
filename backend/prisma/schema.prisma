// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  googleId  String?  @unique
  firstName String
  lastName  String
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  progresses     UserProgress[]
  achievements   UserAchievement[]

  @@map("users")
}

model DailyPuzzle {
  id        String   @id @default(cuid())
  date      String   @unique // YYYY-MM-DD format
  gridData  String   // JSON string of the grid
  cluesData String   // JSON string of the clues
  rows      Int
  cols      Int
  createdAt DateTime @default(now())

  // Relations
  progresses UserProgress[]

  @@map("daily_puzzles")
}

model UserProgress {
  id            String    @id @default(cuid())
  userId        String
  puzzleDate    String
  answersData   String    @default("{}") // JSON string of answers
  completedClues String   @default("[]") // JSON string of completed clue numbers
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  solveTime     Int?      // in seconds
  startedAt     DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  puzzle       DailyPuzzle @relation(fields: [puzzleDate], references: [date])

  @@unique([userId, puzzleDate])
  @@map("user_progress")
}

model Achievement {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  points        Int
  conditionType String
  conditionData String   // JSON string of condition parameters
  icon          String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime  @default(now())
  puzzleDate    String?
  metadataData  String?   // JSON string of metadata

  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement  Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}